// Generated by dojo-bindgen on Fri, 15 Aug 2025 22:38:41 +0000. Do not modify this file manually.
import { Account } from "starknet";
import {
    Clause,
    Client,
    ModelClause,
    createClient,
    valueToToriiValueAndOperator,
} from "@dojoengine/torii-client";
import {
    LOCAL_KATANA,
    LOCAL_RELAY,
    LOCAL_TORII,
    createManifestFromJson,
} from "@dojoengine/core";

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
    data: string[];
    pending_word: string;
    pending_word_len: number;
}

// Type definition for `dojo::model::definition::ModelDef` struct
export interface ModelDef {
    name: string;
    layout: Layout;
    schema: Struct;
    packed_size: Option<number>;
    unpacked_size: Option<number>;
}

// Type definition for `full_starter_react::models::user::UserValue` struct
export interface UserValue {
    username: string;
    created_at: bigint;
}

// Type definition for `dojo::meta::introspect::Struct` struct
export interface Struct {
    name: string;
    attrs: string[];
    children: Member[];
}

// Type definition for `dojo::meta::introspect::Enum` struct
export interface Enum {
    name: string;
    attrs: string[];
    children: [string, Ty][];
}

// Type definition for `full_starter_react::models::user::User` struct
export interface User {
    owner: string;
    username: string;
    created_at: bigint;
}

// Type definition for `dojo::meta::layout::FieldLayout` struct
export interface FieldLayout {
    selector: string;
    layout: Layout;
}

// Type definition for `dojo::meta::introspect::Member` struct
export interface Member {
    name: string;
    attrs: string[];
    ty: Ty;
}

// Type definition for `dojo::meta::introspect::Ty` enum
type Ty = { type: 'Primitive'; data: string; } | { type: 'Struct'; data: Struct; } | { type: 'Enum'; data: Enum; } | { type: 'Tuple'; data: Ty[]; } | { type: 'Array'; data: Ty[]; } | { type: 'ByteArray'; }
// Type definition for `core::option::Option` enum
type Option<A> = { type: 'Some'; data: A; } | { type: 'None'; }
// Type definition for `dojo::meta::layout::Layout` enum
type Layout = { type: 'Fixed'; data: number[]; } | { type: 'Struct'; data: FieldLayout[]; } | { type: 'Tuple'; data: Layout[]; } | { type: 'Array'; data: Layout[]; } | { type: 'ByteArray'; } | { type: 'Enum'; data: FieldLayout[]; }

// Type definition for `full_starter_react::models::player::PlayerValue` struct
export interface PlayerValue {
    user_id: string;
    created_at: bigint;
    last_updated_at: bigint;
    last_login_at: bigint;
    fame: number;
    charisma: number;
    stamina: number;
    intelligence: number;
    leadership: number;
    universe_currency: bigint;
}

// Type definition for `full_starter_react::models::player::Player` struct
export interface Player {
    id: string;
    user_id: string;
    created_at: bigint;
    last_updated_at: bigint;
    last_login_at: bigint;
    fame: number;
    charisma: number;
    stamina: number;
    intelligence: number;
    leadership: number;
    universe_currency: bigint;
}


class BaseCalls {
    contractAddress: string;
    account?: Account;

    constructor(contractAddress: string, account?: Account) {
        this.account = account;
        this.contractAddress = contractAddress;
    }

    async execute(entrypoint: string, calldata: any[] = []): Promise<void> {
        if (!this.account) {
            throw new Error("No account set to interact with dojo_starter");
        }

        await this.account.execute(
            {
                contractAddress: this.contractAddress,
                entrypoint,
                calldata,
            },
            undefined,
            {
                maxFee: 0,
            }
        );
    }
}

class GameCalls extends BaseCalls {
    constructor(contractAddress: string, account?: Account) {
        super(contractAddress, account);
    }

    async createPlayer(player_id: string): Promise<void> {
        try {
            await this.execute("create_player", [player_id])
        } catch (error) {
            console.error("Error executing createPlayer:", error);
            throw error;
        }
    }

    async updateAttributes(player_id: string, fame: number, charisma: number, stamina: number, intelligence: number, leadership: number): Promise<void> {
        try {
            await this.execute("update_attributes", [player_id,
                fame,
                charisma,
                stamina,
                intelligence,
                leadership])
        } catch (error) {
            console.error("Error executing updateAttributes:", error);
            throw error;
        }
    }

    async addCurrency(player_id: string, amount: bigint): Promise<void> {
        try {
            await this.execute("add_currency", [player_id,
                amount])
        } catch (error) {
            console.error("Error executing addCurrency:", error);
            throw error;
        }
    }

    async spendCurrency(player_id: string, amount: bigint): Promise<void> {
        try {
            await this.execute("spend_currency", [player_id,
                amount])
        } catch (error) {
            console.error("Error executing spendCurrency:", error);
            throw error;
        }
    }

    async recordLogin(player_id: string): Promise<void> {
        try {
            await this.execute("record_login", [player_id])
        } catch (error) {
            console.error("Error executing recordLogin:", error);
            throw error;
        }
    }

    async upgrade(new_class_hash: string): Promise<void> {
        try {
            await this.execute("upgrade", [new_class_hash])
        } catch (error) {
            console.error("Error executing upgrade:", error);
            throw error;
        }
    }

    async dojoName(): Promise<void> {
        try {
            await this.execute("dojo_name", [])
        } catch (error) {
            console.error("Error executing dojoName:", error);
            throw error;
        }
    }

    async worldDispatcher(): Promise<void> {
        try {
            await this.execute("world_dispatcher", [])
        } catch (error) {
            console.error("Error executing worldDispatcher:", error);
            throw error;
        }
    }
}

type Query = Partial<{
    User: ModelClause<User>;
    Player: ModelClause<Player>;
}>;

type ResultMapping = {
    User: User;
    Player: Player;
};

type QueryResult<T extends Query> = {
    [K in keyof T]: K extends keyof ResultMapping ? ResultMapping[K] : never;
};

// Only supports a single model for now, since torii doesn't support multiple models
// And inside that single model, there's only support for a single query.
function convertQueryToToriiClause(query: Query): Clause | undefined {
    const [model, clause] = Object.entries(query)[0];

    if (Object.keys(clause).length === 0) {
        return undefined;
    }

    const clauses: Clause[] = Object.entries(clause).map(([key, value]) => {
        return {
            Member: {
                model,
                member: key,
                ...valueToToriiValueAndOperator(value),
            },
        } satisfies Clause;
    });

    return clauses[0];
}
type GeneralParams = {
    toriiUrl?: string;
    relayUrl?: string;
    account?: Account;
};

type InitialParams = GeneralParams &
    (
        | {
                rpcUrl?: string;
                worldAddress: string;
                gameAddress: string;
            }
        | {
                manifest: any;
            }
    );

export class FullStarterReact {
    rpcUrl: string;
    toriiUrl: string;
    toriiPromise: Promise<Client>;
    relayUrl: string;
    worldAddress: string;
    private _account?: Account;
    game: GameCalls;
    gameAddress: string;

    constructor(params: InitialParams) {
        if ("manifest" in params) {
            const config = createManifestFromJson(params.manifest);
            this.rpcUrl = config.world.metadata.rpc_url;
            this.worldAddress = config.world.address;

            const gameAddress = config.contracts.find(
                (contract) =>
                    contract.name === "dojo_starter::systems::game::game"
            )?.address;

            if (!gameAddress) {
                throw new Error("No game contract found in the manifest");
            }

            this.gameAddress = gameAddress;
        } else {
            this.rpcUrl = params.rpcUrl || LOCAL_KATANA;
            this.worldAddress = params.worldAddress;
            this.gameAddress = params.gameAddress;
        }
        this.toriiUrl = params.toriiUrl || LOCAL_TORII;
        this.relayUrl = params.relayUrl || LOCAL_RELAY;
        this._account = params.account;
        this.game = new GameCalls(this.gameAddress, this._account);

        this.toriiPromise = createClient([], {
            rpcUrl: this.rpcUrl,
            toriiUrl: this.toriiUrl,
            worldAddress: this.worldAddress,
            relayUrl: this.relayUrl,
        });
    }

    get account(): Account | undefined {
        return this._account;
    }

    set account(account: Account) {
        this._account = account;
        this.game = new GameCalls(this.gameAddress, this._account);
    }

    async query<T extends Query>(query: T, limit = 10, offset = 0) {
        const torii = await this.toriiPromise;

        return {
            torii,
            findEntities: async () => this.findEntities(query, limit, offset),
        };
    }

    async findEntities<T extends Query>(query: T, limit = 10, offset = 0) {
        const torii = await this.toriiPromise;

        const clause = convertQueryToToriiClause(query);

        const toriiResult = await torii.getEntities({
            limit,
            offset,
            clause,
        });

        return toriiResult as Record<string, QueryResult<T>>;
    }

    async findEntity<T extends Query>(query: T) {
        const result = await this.findEntities(query, 1);

        if (Object.values(result).length === 0) {
            return undefined;
        }

        return Object.values(result)[0] as QueryResult<T>;
    }
}